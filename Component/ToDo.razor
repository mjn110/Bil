@page "/todo"
@page "/todo/{description}"
@using Components.Data
@using Newtonsoft.Json.Linq
<div>
    @if (bool.TryParse(description, out var result))
    {
        <h3 class="mb-3">@this.GetType().Name</h3>
    }
    <p>
        @if (overview != null)
        {
            <h5 class="mt-3">Overview</h5>
            @overview
        }
        @if (usage != null)
        {
            <h5 class="mt-3">Usage</h5>
            @usage
        }
    </p>
</div>

<div class="d-flex justify-content-center vh-100">
    <div class="col-12 col-lg-8">
        <div class="input-group mb-2">
            <input class="form-control py-2" autofocus @bind="newTask" placeholder="Enter a task..." />
            <button class="btn btn-primary" @onclick="AddTask">Add</button>
        </div>
        <ul class="list-group">
            @foreach (var task in tasks.Select((value, index) => new { value, index }))
            {
                <li class="list-group-item d-flex justify-content-between align-items-center rounded-3 border mb-2">
                    @task.value
                    <button class="btn btn-danger btn-sm" @onclick="() => RemoveTask(task.index)">
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-trash-fill" viewBox="0 0 16 16">
                            <path d="M2.5 1a1 1 0 0 0-1 1v1a1 1 0 0 0 1 1H3v9a2 2 0 0 0 2 2h6a2 2 0 0 0 2-2V4h.5a1 1 0 0 0 1-1V2a1 1 0 0 0-1-1H10a1 1 0 0 0-1-1H7a1 1 0 0 0-1 1zm3 4a.5.5 0 0 1 .5.5v7a.5.5 0 0 1-1 0v-7a.5.5 0 0 1 .5-.5M8 5a.5.5 0 0 1 .5.5v7a.5.5 0 0 1-1 0v-7A.5.5 0 0 1 8 5m3 .5v7a.5.5 0 0 1-1 0v-7a.5.5 0 0 1 1 0" />
                        </svg>
                    </button>
                </li>
            }
        </ul>
    </div>
</div>
@code {
    [Parameter]
    public string description { get; set; } = "false";

    private string newTask = string.Empty;
    private List<string> tasks = new List<string>() { "Default task" };

    private string overview { get; set; }
    private string usage { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (bool.TryParse(description, out var result))
        {
            GetDescription();
        }
    }

    private void GetDescription()
    {
        string json = File.ReadAllText("wwwroot/data/description.json");

        // Deserialize into a JArray for dynamic access
        var descriptions = JArray.Parse(json);

        // Find the matching record based on Name
        var record = descriptions.FirstOrDefault(d => d["Name"]?.ToString() == this.GetType().Name);

        if (record != null)
        {
            overview = record["Overview"]?.ToString();
            usage = record["Usage"]?.ToString();
        }
    }

    private void AddTask()
    {
        if (!string.IsNullOrWhiteSpace(newTask))
        {
            tasks.Add(newTask);
            newTask = string.Empty; // Clear input field
            StateHasChanged(); // Ensure UI updates
        }
    }

    private void RemoveTask(int index)
    {
        if (index >= 0 && index < tasks.Count)
        {
            tasks.RemoveAt(index);
            StateHasChanged(); // Ensure UI updates
        }
    }
}
