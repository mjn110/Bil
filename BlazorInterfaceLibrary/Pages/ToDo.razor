@page "/todo"
<div class="container-fluid">
    <h3 class="mb-3">To Do List</h3>
    <p>
        <h5 class="mt-3">Overview</h5>
        The Blazor To-Do List Component is a simple yet powerful tool for managing tasks within a Blazor application. It allows users to add, display, and remove tasks dynamically using Blazor’s two-way data binding. Built with Bootstrap for a clean and responsive UI, this component is designed to be lightweight and easy to integrate into any application.

        With an intuitive interface and real-time updates, users can quickly organize their tasks without needing page reloads. Whether used for personal productivity, project tracking, or as a foundational component for more advanced task management features, this to-do list offers flexibility and efficiency.

        <h5 class="mt-3">Features</h5>
        <ul>
            <li>Dynamic Task Management – Add and remove tasks in real-time.</li>
            <li>Two-Way Data Binding – Instantly updates the UI with bind.</li>
            <li>Bootstrap Styling – Clean and responsive design.</li>
            <li>Auto-Focus Input – Quick task entry on page load.</li>
        </ul>

        <h5 class="mt-3">Usage</h5>
        Users enter a task in the input field and click the "Add" button to store it.
        Tasks are displayed dynamically in a list, each with a delete button.
        Clicking the delete button removes the corresponding task from the list.
    </p>
    <div class="d-flex justify-content-center vh-100">
        <div class="col-md-8">
        <div class="input-group mb-2">
            <input class="form-control py-2" autofocus @bind="newTask" placeholder="Enter a task..." />
            <button class="btn btn-primary" @onclick="AddTask">Add</button>
        </div>
        <ul class="list-group">
            @foreach (var task in tasks.Select((value, index) => new { value, index }))
            {
                <li class="list-group-item d-flex justify-content-between align-items-center rounded-3 border mb-2">
                    @task.value
                    <button class="btn btn-danger btn-sm" @onclick="() => RemoveTask(task.index)">
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-trash-fill" viewBox="0 0 16 16">
                            <path d="M2.5 1a1 1 0 0 0-1 1v1a1 1 0 0 0 1 1H3v9a2 2 0 0 0 2 2h6a2 2 0 0 0 2-2V4h.5a1 1 0 0 0 1-1V2a1 1 0 0 0-1-1H10a1 1 0 0 0-1-1H7a1 1 0 0 0-1 1zm3 4a.5.5 0 0 1 .5.5v7a.5.5 0 0 1-1 0v-7a.5.5 0 0 1 .5-.5M8 5a.5.5 0 0 1 .5.5v7a.5.5 0 0 1-1 0v-7A.5.5 0 0 1 8 5m3 .5v7a.5.5 0 0 1-1 0v-7a.5.5 0 0 1 1 0" />
                        </svg>
                    </button>
                </li>
            }
        </ul>
    </div>
    </div>
</div>
@code {
    private string newTask = string.Empty;
    private List<string> tasks = new List<string>() {"Default task"};

    private void AddTask()
    {
        if (!string.IsNullOrWhiteSpace(newTask))
        {
            tasks.Add(newTask);
            newTask = string.Empty; // Clear input field
            StateHasChanged(); // Ensure UI updates
        }
    }

    private void RemoveTask(int index)
    {
        if (index >= 0 && index < tasks.Count)
        {
            tasks.RemoveAt(index);
            StateHasChanged(); // Ensure UI updates
        }
    }
}
