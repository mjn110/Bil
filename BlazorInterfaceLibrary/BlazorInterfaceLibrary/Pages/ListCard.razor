@inject HttpClient http;
@using BlazorInterfaceLibrary.Data
<div class="col mb-3">
    <div class="bg-white rounded border shadow overflow-auto p-3 h-100">
        <table class="table table-responsive-lg table-borderless table-hover mb-auto overflow-auto">
            <thead>
                <tr>
                    <th scope="col" class="text-center px-0">#</th>
                    <th scope="col" class="px-0">Collection</th>
                    <th scope="col" class="px-0">Destination</th>
                </tr>
            </thead>
            <tbody class="text-secondary m-4 h-100">
                @if (PaginatedPeople != null)
                {
                    foreach (var item in PaginatedPeople)
                    {
                        <tr>
                            <th class="py-0" scope="row">
                                <button class="btn py-0" onclick="@(() =>MoveForward((Person)item))" oncontextmenu="@(() =>MoveBack((Person)item))" @oncontextmenu:preventDefault="true">
                                    @if (item.Status == 1)
                                    {
                                        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" class="bi bi-bag-plus-fill" viewBox="0 0 16 16">
                                            <path fill-rule="evenodd" d="M10.5 3.5a2.5 2.5 0 0 0-5 0V4h5v-.5zm1 0V4H15v10a2 2 0 0 1-2 2H3a2 2 0 0 1-2-2V4h3.5v-.5a3.5 3.5 0 1 1 7 0zM8.5 8a.5.5 0 0 0-1 0v1.5H6a.5.5 0 0 0 0 1h1.5V12a.5.5 0 0 0 1 0v-1.5H10a.5.5 0 0 0 0-1H8.5V8z" />
                                        </svg>
                                    }
                                    else if (item.Status == 2)
                                    {
                                        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" class="bi bi-truck-front-fill" viewBox="0 0 16 16">
                                            <path fill-rule="evenodd" d="M3.5 0A2.5 2.5 0 0 0 1 2.5v9c0 .818.393 1.544 1 2v2a.5.5 0 0 0 .5.5h2a.5.5 0 0 0 .5-.5V14h6v1.5a.5.5 0 0 0 .5.5h2a.5.5 0 0 0 .5-.5v-2c.607-.456 1-1.182 1-2v-9A2.5 2.5 0 0 0 12.5 0h-9ZM3 3a1 1 0 0 1 1-1h8a1 1 0 0 1 1 1v3.9c0 .625-.562 1.092-1.17.994C10.925 7.747 9.208 7.5 8 7.5c-1.208 0-2.925.247-3.83.394A1.008 1.008 0 0 1 3 6.9V3Zm1 9a1 1 0 1 0 0-2 1 1 0 0 0 0 2Zm8 0a1 1 0 1 0 0-2 1 1 0 0 0 0 2Zm-5-2a1 1 0 1 0 0 2h2a1 1 0 1 0 0-2H7Z" />
                                        </svg>
                                    }
                                    else if (item.Status == 3)
                                    {
                                        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="#3db05c" class="bi bi-bag-check-fill" viewBox="0 0 16 16">
                                            <path fill-rule="evenodd" d="M10.5 3.5a2.5 2.5 0 0 0-5 0V4h5v-.5zm1 0V4H15v10a2 2 0 0 1-2 2H3a2 2 0 0 1-2-2V4h3.5v-.5a3.5 3.5 0 1 1 7 0zm-.646 5.354a.5.5 0 0 0-.708-.708L7.5 10.793 6.354 9.646a.5.5 0 1 0-.708.708l1.5 1.5a.5.5 0 0 0 .708 0l3-3z" />
                                        </svg>
                                    }
                                </button>
                            </th>
                            <td class="w-50 p-0 align-middle"><a href="Order.html" class="text-muted h6 text-decoration-none">@item.Date</a></td>
                            <td class="w-50 p-0 align-middle">
                                <a href="Order.html" class="text-muted h6 text-decoration-none">@item.Name</a>
                            </td>
                        </tr>

                        <Bar Color="bg-primary" Value="(item.Status*33)" height="3px"></Bar>
                    }
                }
            </tbody>
        </table>
        <Pagination SelectedPage="ChangePage" PaginatedPeople="PaginatedPeople"></Pagination>
    </div>
</div>
@code {
    [Parameter]
    public List<dynamic> people { get; set; } = new List<dynamic>();

    public PaginatedList<dynamic> PaginatedPeople { get; set; } = null;

    string objectType;

    public void AddPersons()
    {
        PaginatedPeople = new PaginatedList<dynamic>(people, 1, 3);
    }

    public void ChangePage(int index)
    {
        PaginatedPeople = new PaginatedList<dynamic>(people, index, 3);
    }

    public void MoveForward(Person person)
    {
        if (person.Status < 3)
        {
            person.Status++;
            StateHasChanged();
        }
    }

    public void MoveBack(Person person)
    {
        if (person.Status > 1)
        {
            person.Status--;
            StateHasChanged();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        string json = File.ReadAllText("wwwroot/data/people.json");
        var peopleList = Newtonsoft.Json.JsonConvert.DeserializeObject<List<Person>>(json);
        foreach (var item in peopleList)
        {
            people.Add(item);
        }

        if (PaginatedPeople == null)
        {
            AddPersons();
        }
    }
}
